7. @Configuration 설정 클래스의 @Bean 설정과 싱글톤
 - 스프링 컨테이너는 @Bean 이 붙은 메서드에 대해 한 개의 객체만 생성한다. 
 - 이는 다른 설정 메서드에 memberDao() 를 몇 번을 호출하더라도 항상 같은 객체를 리턴한다는 것을 의미한다. 
 - 스프링이 런타임에 생성한 설정 클래스의 memberDao() 메서드는 매번 새로운 객체를 생성하지 않는다. 
 - 대신 한번 생성한 객체를 보관했다가 이후에는 동일한 객체를 리턴한다. 
 
 
 9. getBean() 메서드 사용
 - 지금까지 작성한 예제는 getBean() 메서드를 이용해서 사용할 빈 객체를 구했다. 
 
 VersionPrinter versionPrinter = ctx.getBean("versionPrinter", VersionPrinter.class);
 
 - 여기서 getBean() 메서드의 첫 번째 인자는 빈의 이름이고 두번째 인자는 빈의 타입이다
 - getBean() 메서드를 호출할 때 존재하지 않는 빈 이름을 사용하면 익셉션이 발생한다. 
 
 - 빈의 실제 타입과 getBean() 메서드에 지정한 타입이 달라도 익셉션이 발생한다. 
 
 - 다음과 같이 빈 이름을 지정하지 않고 타입만으로 빈을 구할 수도 있다. 
 
 VersionPrinter versionPrinter = ctx.getBean(MeberPrinter.class);
 
 - 이때 해당타입의 빈 객체가 한 개만 존재하면 해당 빈을 구해서 리턴한다. 
 - 해당 타입의 빈 객체가 존재하지 않으면 익셉션이 발생한다. 
 - 같은 타입의 빈 객체가 두개 이상 존재하는 경우 익셉션이 발생한다. 
 
 10. 주입 대상 객체를 모두 빈 객체로 설정해야 하나? 
 
 - 주입할 객체가 꼭 스프링 빈이어야 할 필요는 없다. 
 
 객체를 스프링 빈으로 등록할 때와 등록하지 않을때의 차이는 스프링 컨테이너가 객체를 관리하는지 여부이다. 
 //아래 코드는 익셉션을 발생한다. 
 MemberPrinter printer = ctx.getBean(MemberPrinter.class); 
 
 스프링 컨테이너는 자동 주입, 라이프사이클 관리 등 단순 객체 생성 외에 객체 관리를 위한 다양한 기능을 제공하는데 빈으로 등록한 객체에만 기능을 적용한다. 
  